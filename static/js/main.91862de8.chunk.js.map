{"version":3,"sources":["components/Header.js","components/Error.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","Error","message","Form","search","setSearch","setQuery","useState","error","setError","city","country","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Weather","result","main","parseFloat","temp","toFixed","temp_max","temp_min","App","component","query","setResult","useEffect","a","url","fetch","res","json","ok","fetchApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.91862de8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({title}) => {\r\n    return ( \r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n                <a href=\"#!\" className=\"brand-logo\">{title}</a>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\n\r\nconst Error = ({message}) => {\r\n    return ( \r\n        <p className=\"red darken-4 error\">{message}</p>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\n\r\nconst Form = ({search, setSearch, setQuery}) => {\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    const {city, country} = search;\r\n\r\n    const handleChange = e => {\r\n        setSearch({\r\n            ...search,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if(city.trim() === '' || country.trim() === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        setError(false);\r\n\r\n        setQuery(true)\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {error ? <Error message='Every field must be completed'/> : null}\r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    id=\"city\"\r\n                    value={city}\r\n                    onChange={handleChange}\r\n                />\r\n                <label htmlFor=\"city\">City: </label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <select\r\n                    name=\"country\"\r\n                    id=\"country\"\r\n                    value={country}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"\">Select a country</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"ES\">España</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                </select>\r\n                <label htmlFor=\"country\">Country: </label>\r\n            </div>\r\n\r\n            <div className=\"input-field col s12\">\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4 col s12\"\r\n                >Search Weather</button>\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = ({result}) => {\r\n\r\n    const {name, main} = result;\r\n\r\n    if(!name) return null;\r\n\r\n    const kelvin = 273.15;\r\n\r\n    return ( \r\n        <div className=\"card-panel white s12\">\r\n            <div className=\"black-text\">\r\n                <h2>The weather from {name} is:</h2>\r\n                <p className=\"temperatura\">\r\n                    { parseFloat( main.temp - kelvin).toFixed(2)} <span> &#x2103;</span>\r\n                </p>\r\n                <p>Maximum Temperature: \r\n                    { parseFloat( main.temp_max - kelvin).toFixed(2)} <span> &#x2103;</span>\r\n                </p>\r\n                <p>Minimum Temperature: \r\n                    { parseFloat( main.temp_min - kelvin).toFixed(2)} <span> &#x2103;</span>\r\n                </p>\r\n            </div>\r\n        </div> );\r\n}\r\n \r\nexport default Weather;","import React, {useState, useEffect} from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Weather from './components/Weather'\nimport Error from './components/Error'\n\nfunction App() {\n\n  const [search, setSearch] = useState({\n    city: '',\n    country: '',\n  })\n\n  const [query, setQuery] = useState(false);\n\n  const [result, setResult] = useState({});\n\n  const [error, setError] = useState(false);\n\n  const {city, country} = search;\n\n  useEffect( () => {\n    const fetchApi = async () => {\n\n      if(query){\n        const appId = '9902be6998f7918b5959865c08bfe896';\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${appId}`;\n\n        const res = await fetch(url);\n        const result = await res.json();\n\n        setResult(result);\n        setQuery(false);\n\n        if(res.ok){\n          setError(false);\n        } else{\n          setError(true);\n        }\n      }\n\n    }\n    fetchApi();\n  }, [query])\n\n  let component;\n  if(error){\n    component = <Error message=\"No results.\" />\n  } else{\n    component = <Weather \n                  result={result}\n                />\n  }\n\n  return (\n    <>\n      <Header \n        title='Weather'\n      />\n\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Form \n              search={search}\n              setSearch={setSearch}\n              setQuery={setQuery}\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              {component}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}